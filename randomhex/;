#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "board.h"

#include <iostream>
#include <QtConcurrentRun>
#include <QFuture>
#include <QFutureWatcher>


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{


    ui->setupUi(this);
    mainBoard = new Board(11);
    ui->boardView->setBoard(mainBoard);

    mainBoardSim = new Board(11);
    ui->boardViewSim->setBoard(mainBoardSim);


    ui->progressBarSim->setOrientation(Qt::Horizontal);
    ui->progressBarSim->setRange(1, 5000);
    ui->progressBarSim->setValue(1);
    ui->progressBarSim->setVisible(0);

    mProb = 50;
    connect(ui->mainProb, SIGNAL(valueChanged(int)),
        this, SLOT(setMProb(int)));
    connect(ui->mainSize, SIGNAL(valueChanged(int)),
        this, SLOT(setMSize(int)));

    /*
    connect(mainBoard, SIGNAL(valueChanged(int)),
        ui->progressBarSim, SLOT(setValue(int)));

    connect(mainBoard, SIGNAL(rangeChanged(int, int)),
        ui->progressBarSim, SLOT(setRange(int, int)));
    */

    srand(time(0));
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::setMProb(int v){
  this->mProb = v;
}

void MainWindow::setMSize(int v){
  delete(mainBoard);
  mainBoard = new Board(v);

  ui->boardView->setBoard(mainBoard);
}

void MainWindow::on_fillBoard_clicked()
{
   mainBoard->fillRandom(mProb);

   ui->boardView->scene()->update();
}

void MainWindow::on_articulationPoint_clicked()
{

   mainBoard->findArticulationPoints(2);
   ui->boardView->scene()->update();
}

void MainWindow::displayFinishedSim()
{
    ui->boardViewSim->scene()->update();
}

void MainWindow::on_simulatePivot_clicked()
{
    ui->progressBarSim->setVisible(1);

    mainBoardSim->generateMove(50000, 0);

    ui->progressBarSim->setVisible(0);
}
